{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-14T11:10:34.488074Z","iopub.execute_input":"2024-08-14T11:10:34.488452Z","iopub.status.idle":"2024-08-14T11:10:34.968158Z","shell.execute_reply.started":"2024-08-14T11:10:34.488423Z","shell.execute_reply":"2024-08-14T11:10:34.966897Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import scipy.stats as stats\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy import stats\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:11:38.623721Z","iopub.execute_input":"2024-08-14T11:11:38.624127Z","iopub.status.idle":"2024-08-14T11:11:39.425799Z","shell.execute_reply.started":"2024-08-14T11:11:38.624094Z","shell.execute_reply":"2024-08-14T11:11:39.424622Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/train.csv\")\ntest_data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:10:34.970331Z","iopub.execute_input":"2024-08-14T11:10:34.970935Z","iopub.status.idle":"2024-08-14T11:10:54.477280Z","shell.execute_reply.started":"2024-08-14T11:10:34.970891Z","shell.execute_reply":"2024-08-14T11:10:54.476257Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Mark duplicates as booleans\nduplicates = data.duplicated()\ntest_duplicates = test_data.duplicated()\n\n# Count the number of duplicates\nnum_duplicates = duplicates.sum()\nnum_duplicates_test = duplicates.sum()\n\nprint(f\"Total number of duplicates: {num_duplicates}\")\nprint(f\"Total number of duplicates in test: {num_duplicates_test}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:44:40.787293Z","iopub.execute_input":"2024-08-14T08:44:40.787674Z","iopub.status.idle":"2024-08-14T08:44:54.513954Z","shell.execute_reply.started":"2024-08-14T08:44:40.787639Z","shell.execute_reply":"2024-08-14T08:44:54.512542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def null_percent(data):\n    percent = ((data.isnull().sum() /len(data)) * 100).round(2)\n    return percent\n\nprint(\"Null values in train data\")\nprint(null_percent(data))\nprint(\"Null values in test data\")\nprint(null_percent(test_data))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:44:54.516030Z","iopub.execute_input":"2024-08-14T08:44:54.517062Z","iopub.status.idle":"2024-08-14T08:45:02.716816Z","shell.execute_reply.started":"2024-08-14T08:44:54.517004Z","shell.execute_reply":"2024-08-14T08:45:02.715752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Just to check dropping only highest missing values\ndata = data.drop(['veil-type'], axis = 1)\ntest_data = test_data.drop(['veil-type'], axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:10:54.479918Z","iopub.execute_input":"2024-08-14T11:10:54.480379Z","iopub.status.idle":"2024-08-14T11:10:55.863354Z","shell.execute_reply.started":"2024-08-14T11:10:54.480340Z","shell.execute_reply":"2024-08-14T11:10:55.862321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Dropping columns with high percentages of missing values\n#data = data.drop(['spore-print-color', 'veil-color', 'veil-type', 'stem-root'], axis=1)\n#test_data = test_data.drop(['spore-print-color', 'veil-color', 'veil-type', 'stem-root'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:18:00.589100Z","iopub.execute_input":"2024-08-14T08:18:00.589455Z","iopub.status.idle":"2024-08-14T08:18:01.800701Z","shell.execute_reply.started":"2024-08-14T08:18:00.589423Z","shell.execute_reply":"2024-08-14T08:18:01.799373Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:10:55.864528Z","iopub.execute_input":"2024-08-14T11:10:55.864838Z","iopub.status.idle":"2024-08-14T11:10:55.888356Z","shell.execute_reply.started":"2024-08-14T11:10:55.864811Z","shell.execute_reply":"2024-08-14T11:10:55.887094Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Imputing median values to the misisng values of float64\nnum_cols = data.select_dtypes(include=['float64']).columns\n# Take median values and imputng them, same would be for test set\ndata[num_cols] = data[num_cols].fillna(data[num_cols].median())\n# For test set\ntest_data[num_cols] = test_data[num_cols].fillna(test_data[num_cols].median())","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:10:55.890519Z","iopub.execute_input":"2024-08-14T11:10:55.890870Z","iopub.status.idle":"2024-08-14T11:10:56.398703Z","shell.execute_reply.started":"2024-08-14T11:10:55.890838Z","shell.execute_reply":"2024-08-14T11:10:56.397635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"alpha = 0.05\nvalues = {}\n\nfor col in data.columns:\n    if col == \"class\":\n        continue\n    \n    A, B = data[col], data['class']\n    \n    dfObserved = pd.crosstab(A, B)\n    chi2, p, dof, expected = stats.chi2_contingency(dfObserved.values)\n    values[col] = p\n    if p < alpha:\n        # Reject null hypothesis\n        print(\"{} is important. (p = {})\".format(col, p))\n    else:\n        print(\"{} is NOT important. (p = {})\".format(col, p))\n        \nprint(data['class'].value_counts())\nsns.countplot(x='class', data = data)\nplt.xticks(rotation = 60)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:20:25.699767Z","iopub.execute_input":"2024-08-14T08:20:25.700870Z","iopub.status.idle":"2024-08-14T08:22:09.308244Z","shell.execute_reply.started":"2024-08-14T08:20:25.700820Z","shell.execute_reply":"2024-08-14T08:22:09.306987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# New way","metadata":{}},{"cell_type":"markdown","source":"## Filling NaN values","metadata":{}},{"cell_type":"markdown","source":"As were discussed in the group our data was syntethic, however it stores a lot of data inside even for the NaN values. The first approach was just to use mode and fill those values. However, then community understand that it was made specifically and rather than using mode value we need to specifically point this as missing. Our algorithm would train and get information from this data. This is because they used syntethic data + GAN which made noise to our data.\n\n**Noise values** - our dataset contains also noise values, these values which rarely occuring. That's why we putted threshold of 100, if they are occuring less than this values than they are rarerly occuring otherwise less. By doing this our AI algorithm could better distinguish correct values and to which of the categories it should pay attention and which skips. This also reduces overfitting because model generalizes much better","metadata":{}},{"cell_type":"code","source":"def cleaning(df):\n    threshold = 100\n    \n    # all our categorical columns\n    cat_feats = [\"cap-shape\", \"cap-surface\", \"cap-color\", \"does-bruise-or-bleed\", \"gill-attachment\",\n                \"gill-spacing\", \"gill-color\", \"stem-root\", \"stem-surface\", \"stem-color\",\n                \"veil-color\", \"has-ring\", \"ring-type\", \"spore-print-color\", \"habitat\", \"season\"]\n    \n    \n    for feat in cat_feats:\n        if df[feat].dtype.name == \"category\":\n            # Add \"missing\" and \"noise\" to categories if not presented\n            if 'missing' not in df[feat].cat.categories:\n                df[feat] = df[feat].cat.add_categories('missing')\n            if 'noise' not in df[feat].cat.categories:\n                df[feat] = df[feat].cat.add_categories('noise')\n                \n        else:\n            # convert type to \"category\"\n            df[feat] = df[feat].astype('category')\n            df[feat] = df[feat].cat.add_categories(['missing', 'noise'])\n        \n        # Fill missing values with 'missing'\n        df[feat] = df[feat].fillna('missing')\n        \n        # Replace infrequent categories with 'noise'\n        counts = df[feat].value_counts(dropna=False)\n        infrequent_categories = counts[counts < threshold].index\n        \n        df[feat] = df[feat].apply(lambda x: 'noise' if x in infrequent_categories else x)\n        \n    return df\n    \ndata = cleaning(data)\ntest_data = cleaning(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:10:57.913532Z","iopub.execute_input":"2024-08-14T11:10:57.914010Z","iopub.status.idle":"2024-08-14T11:11:13.229726Z","shell.execute_reply.started":"2024-08-14T11:10:57.913952Z","shell.execute_reply":"2024-08-14T11:11:13.228474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:11:13.231835Z","iopub.execute_input":"2024-08-14T11:11:13.232292Z","iopub.status.idle":"2024-08-14T11:11:13.268326Z","shell.execute_reply.started":"2024-08-14T11:11:13.232259Z","shell.execute_reply":"2024-08-14T11:11:13.267111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cat_feats = [\"cap-shape\", \"cap-surface\", \"cap-color\", \"does-bruise-or-bleed\", \"gill-attachment\",\n                \"gill-spacing\", \"gill-color\", \"stem-root\", \"stem-surface\", \"stem-color\",\n                \"veil-color\", \"has-ring\", \"ring-type\", \"spore-print-color\", \"habitat\", \"season\"]\n    \nfor feat in cat_feats:\n    data[feat] = data[feat].astype('category')\nfor feat in cat_feats:\n    test_data[feat] = test_data[feat].astype('category')","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:11:13.269837Z","iopub.execute_input":"2024-08-14T11:11:13.270184Z","iopub.status.idle":"2024-08-14T11:11:21.443424Z","shell.execute_reply.started":"2024-08-14T11:11:13.270155Z","shell.execute_reply":"2024-08-14T11:11:21.442004Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:11:21.446393Z","iopub.execute_input":"2024-08-14T11:11:21.446860Z","iopub.status.idle":"2024-08-14T11:11:21.468556Z","shell.execute_reply.started":"2024-08-14T11:11:21.446818Z","shell.execute_reply":"2024-08-14T11:11:21.467399Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Splitting data\n\nX = data.drop(['id', 'class'], axis = 1)\ny = data['class']\n\ntest_data = test_data.drop(['id'], axis = 1)\nX.shape, y.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:11:21.469772Z","iopub.execute_input":"2024-08-14T11:11:21.470121Z","iopub.status.idle":"2024-08-14T11:11:21.557666Z","shell.execute_reply.started":"2024-08-14T11:11:21.470092Z","shell.execute_reply":"2024-08-14T11:11:21.556444Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Encode class variables to 0 and 1\n\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(y)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T11:11:53.634312Z","iopub.execute_input":"2024-08-14T11:11:53.634719Z","iopub.status.idle":"2024-08-14T11:11:54.451344Z","shell.execute_reply.started":"2024-08-14T11:11:53.634690Z","shell.execute_reply":"2024-08-14T11:11:54.450327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## XGBoost","metadata":{}},{"cell_type":"code","source":"# Split the data\nX","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Old way","metadata":{}},{"cell_type":"code","source":"category_columns = list(data.select_dtypes(include = ['object']).columns.difference(['class']))\n\nfor col in category_columns:\n    mode_value = data[col].mode()[0]\n    data[col].fillna(mode_value, inplace = True)\n    \n    mode_value_test = test_data[col].mode()[0]\n    test_data[col].fillna(mode_value_test, inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:31:31.694391Z","iopub.execute_input":"2024-08-14T08:31:31.694794Z","iopub.status.idle":"2024-08-14T08:31:48.882837Z","shell.execute_reply.started":"2024-08-14T08:31:31.694763Z","shell.execute_reply":"2024-08-14T08:31:48.881680Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T09:12:43.368877Z","iopub.execute_input":"2024-08-13T09:12:43.369203Z","iopub.status.idle":"2024-08-13T09:12:43.380870Z","shell.execute_reply.started":"2024-08-13T09:12:43.369177Z","shell.execute_reply":"2024-08-13T09:12:43.379700Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Null values in train data\")\nprint(null_percent(data))\nprint(\"Null values in test data\")\nprint(null_percent(test_data))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:31:48.885004Z","iopub.execute_input":"2024-08-14T08:31:48.885393Z","iopub.status.idle":"2024-08-14T08:31:56.600418Z","shell.execute_reply.started":"2024-08-14T08:31:48.885360Z","shell.execute_reply":"2024-08-14T08:31:56.599217Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:30:14.024112Z","iopub.execute_input":"2024-08-14T08:30:14.024565Z","iopub.status.idle":"2024-08-14T08:30:14.059709Z","shell.execute_reply.started":"2024-08-14T08:30:14.024530Z","shell.execute_reply":"2024-08-14T08:30:14.057758Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Modifed","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nimport pandas as pd\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T09:26:28.250750Z","iopub.execute_input":"2024-08-13T09:26:28.251106Z","iopub.status.idle":"2024-08-13T09:26:28.672564Z","shell.execute_reply.started":"2024-08-13T09:26:28.251074Z","shell.execute_reply":"2024-08-13T09:26:28.671206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scaler = MinMaxScaler()\ndata[['cap-diameter', 'stem-height', 'stem-width']] = scaler.fit_transform(data[['cap-diameter', 'stem-height', 'stem-width']])","metadata":{"execution":{"iopub.status.busy":"2024-08-13T09:26:28.674062Z","iopub.execute_input":"2024-08-13T09:26:28.674535Z","iopub.status.idle":"2024-08-13T09:26:29.008535Z","shell.execute_reply.started":"2024-08-13T09:26:28.674494Z","shell.execute_reply":"2024-08-13T09:26:29.007217Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nchunk_size = 100000\n\n# Encoding categorical features using OneHotEncoder\ncategorical_columns = ['cap-shape', 'cap-surface', 'cap-color', 'does-bruise-or-bleed',\n                       'gill-attachment', 'gill-spacing', 'gill-color', 'stem-surface',\n                       'stem-color', 'has-ring', 'ring-type', 'habitat', 'season']\nencoded_chunks = []\n\nencoder = OneHotEncoder(drop='first', sparse=False)\n\n# Split and process the data in chunks\nfor start in range(0, len(data), chunk_size):\n    end = start + chunk_size\n    chunk = data.iloc[start:end]\n    \n    \n    # Encode categorical features\n    encoded_categorical_data = encoder.fit_transform(chunk[categorical_columns])\n    \n    # Convert encoded data to DataFrame\n    encoded_df = pd.DataFrame(encoded_categorical_data, columns=encoder.get_feature_names_out(categorical_columns))\n    \n    # Concatenate normalized and encoded data\n    chunk_encoded = pd.concat([chunk.reset_index(drop=True), encoded_df.reset_index(drop=True)], axis=1)\n    chunk_encoded = chunk_encoded.drop(columns=categorical_columns)\n    \n    # Append the processed chunk to the list\n    encoded_chunks.append(chunk_encoded)\n\n# Combine all processed chunks into a single DataFrame\ndata_encoded = pd.concat(encoded_chunks, axis=0)\n\n# Optionally, save the final DataFrame to disk\ndata_encoded.to_csv('data_encoded.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T09:33:38.156221Z","iopub.execute_input":"2024-08-13T09:33:38.156976Z","iopub.status.idle":"2024-08-13T09:46:16.975545Z","shell.execute_reply.started":"2024-08-13T09:33:38.156940Z","shell.execute_reply":"2024-08-13T09:46:16.971215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming data_encoded is your processed dataset and 'class' is your target\nX = data_encoded.drop(columns=['class'])\ny = data_encoded['class']\n\n# Standardize features before applying PCA\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Apply PCA to reduce dimensions to 2D for visualization\npca = PCA(n_components=2)\nX_pca = pca.fit_transform(X_scaled)\n\n# Create a DataFrame for visualization\npca_df = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])\npca_df['class'] = y\n\n# Plot using Seaborn\nplt.figure(figsize=(10, 8))\nsns.scatterplot(x='PC1', y='PC2', hue='class', data=pca_df, palette='viridis', alpha=0.7)\nplt.title('PCA of KNN Processed Data')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.legend(title='Class')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T09:47:51.744551Z","iopub.execute_input":"2024-08-13T09:47:51.745539Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\n\n# Selecting the number of clusters (k)\nk = 23  # Or a slightly lower number if you suspect fewer categories\n\n# Applying KNN\nknn = KNeighborsClassifier(n_neighbors=k)\ndata_encoded['cluster'] = knn.fit_predict(data_encoded.drop(columns=['id', 'class']))  # Exclude id and class from clustering\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}