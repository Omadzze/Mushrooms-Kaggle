{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "106125e2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-18T08:46:21.058792Z",
     "iopub.status.busy": "2024-08-18T08:46:21.058431Z",
     "iopub.status.idle": "2024-08-18T08:46:21.795830Z",
     "shell.execute_reply": "2024-08-18T08:46:21.794936Z"
    },
    "papermill": {
     "duration": 0.752042,
     "end_time": "2024-08-18T08:46:21.798025",
     "exception": false,
     "start_time": "2024-08-18T08:46:21.045983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s4e8/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e8/train.csv\n",
      "/kaggle/input/playground-series-s4e8/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdede20",
   "metadata": {
    "papermill": {
     "duration": 0.010268,
     "end_time": "2024-08-18T08:46:21.819222",
     "exception": false,
     "start_time": "2024-08-18T08:46:21.808954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "83272928",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:46:21.841690Z",
     "iopub.status.busy": "2024-08-18T08:46:21.841234Z",
     "iopub.status.idle": "2024-08-18T08:46:28.416951Z",
     "shell.execute_reply": "2024-08-18T08:46:28.416157Z"
    },
    "papermill": {
     "duration": 6.589522,
     "end_time": "2024-08-18T08:46:28.419163",
     "exception": false,
     "start_time": "2024-08-18T08:46:21.829641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import xgboost as xgb\n",
    "import shap\n",
    "import graphviz\n",
    "\n",
    "from scipy import stats\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import ConfusionMatrixDisplay"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3e0a2a4",
   "metadata": {
    "papermill": {
     "duration": 0.011241,
     "end_time": "2024-08-18T08:46:28.441359",
     "exception": false,
     "start_time": "2024-08-18T08:46:28.430118",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "81f73878",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:46:28.465135Z",
     "iopub.status.busy": "2024-08-18T08:46:28.464653Z",
     "iopub.status.idle": "2024-08-18T08:46:43.958091Z",
     "shell.execute_reply": "2024-08-18T08:46:43.957296Z"
    },
    "papermill": {
     "duration": 15.508614,
     "end_time": "2024-08-18T08:46:43.960392",
     "exception": false,
     "start_time": "2024-08-18T08:46:28.451778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/train.csv\")\n",
    "test_data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/test.csv\")\n",
    "submission_data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/sample_submission.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c078cae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:46:43.982960Z",
     "iopub.status.busy": "2024-08-18T08:46:43.982640Z",
     "iopub.status.idle": "2024-08-18T08:46:55.771900Z",
     "shell.execute_reply": "2024-08-18T08:46:55.770920Z"
    },
    "papermill": {
     "duration": 11.802916,
     "end_time": "2024-08-18T08:46:55.774075",
     "exception": false,
     "start_time": "2024-08-18T08:46:43.971159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of duplicates: 0\n",
      "Total number of duplicates in test: 0\n"
     ]
    }
   ],
   "source": [
    "# Mark duplicates as booleans\n",
    "duplicates = data.duplicated()\n",
    "test_duplicates = test_data.duplicated()\n",
    "\n",
    "# Count the number of duplicates\n",
    "num_duplicates = duplicates.sum()\n",
    "num_duplicates_test = duplicates.sum()\n",
    "\n",
    "print(f\"Total number of duplicates: {num_duplicates}\")\n",
    "print(f\"Total number of duplicates in test: {num_duplicates_test}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "01c93575",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:46:55.797614Z",
     "iopub.status.busy": "2024-08-18T08:46:55.797296Z",
     "iopub.status.idle": "2024-08-18T08:47:02.595564Z",
     "shell.execute_reply": "2024-08-18T08:47:02.594379Z"
    },
    "papermill": {
     "duration": 6.812702,
     "end_time": "2024-08-18T08:47:02.597748",
     "exception": false,
     "start_time": "2024-08-18T08:46:55.785046",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Null values in train data\n",
      "id                       0.00\n",
      "class                    0.00\n",
      "cap-diameter             0.00\n",
      "cap-shape                0.00\n",
      "cap-surface             21.53\n",
      "cap-color                0.00\n",
      "does-bruise-or-bleed     0.00\n",
      "gill-attachment         16.81\n",
      "gill-spacing            40.37\n",
      "gill-color               0.00\n",
      "stem-height              0.00\n",
      "stem-width               0.00\n",
      "stem-root               88.45\n",
      "stem-surface            63.55\n",
      "stem-color               0.00\n",
      "veil-type               94.88\n",
      "veil-color              87.94\n",
      "has-ring                 0.00\n",
      "ring-type                4.13\n",
      "spore-print-color       91.43\n",
      "habitat                  0.00\n",
      "season                   0.00\n",
      "dtype: float64\n",
      "Null values in test data\n",
      "id                       0.00\n",
      "cap-diameter             0.00\n",
      "cap-shape                0.00\n",
      "cap-surface             21.51\n",
      "cap-color                0.00\n",
      "does-bruise-or-bleed     0.00\n",
      "gill-attachment         16.83\n",
      "gill-spacing            40.40\n",
      "gill-color               0.00\n",
      "stem-height              0.00\n",
      "stem-width               0.00\n",
      "stem-root               88.45\n",
      "stem-surface            63.60\n",
      "stem-color               0.00\n",
      "veil-type               94.88\n",
      "veil-color              87.88\n",
      "has-ring                 0.00\n",
      "ring-type                4.15\n",
      "spore-print-color       91.42\n",
      "habitat                  0.00\n",
      "season                   0.00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculating percentage of null values\n",
    "def null_percent(data):\n",
    "    percent = ((data.isnull().sum() /len(data)) * 100).round(2)\n",
    "    return percent\n",
    "\n",
    "print(\"Null values in train data\")\n",
    "print(null_percent(data))\n",
    "print(\"Null values in test data\")\n",
    "print(null_percent(test_data))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7c19443d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:47:02.620727Z",
     "iopub.status.busy": "2024-08-18T08:47:02.620422Z",
     "iopub.status.idle": "2024-08-18T08:47:03.795856Z",
     "shell.execute_reply": "2024-08-18T08:47:03.795002Z"
    },
    "papermill": {
     "duration": 1.189302,
     "end_time": "2024-08-18T08:47:03.798045",
     "exception": false,
     "start_time": "2024-08-18T08:47:02.608743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dropping values which had most NaN\n",
    "data = data.drop(['veil-type'], axis = 1)\n",
    "test_data = test_data.drop(['veil-type'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "284340bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:47:03.821186Z",
     "iopub.status.busy": "2024-08-18T08:47:03.820889Z",
     "iopub.status.idle": "2024-08-18T08:47:03.834199Z",
     "shell.execute_reply": "2024-08-18T08:47:03.833323Z"
    },
    "papermill": {
     "duration": 0.027471,
     "end_time": "2024-08-18T08:47:03.836649",
     "exception": false,
     "start_time": "2024-08-18T08:47:03.809178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3116945 entries, 0 to 3116944\n",
      "Data columns (total 21 columns):\n",
      " #   Column                Dtype  \n",
      "---  ------                -----  \n",
      " 0   id                    int64  \n",
      " 1   class                 object \n",
      " 2   cap-diameter          float64\n",
      " 3   cap-shape             object \n",
      " 4   cap-surface           object \n",
      " 5   cap-color             object \n",
      " 6   does-bruise-or-bleed  object \n",
      " 7   gill-attachment       object \n",
      " 8   gill-spacing          object \n",
      " 9   gill-color            object \n",
      " 10  stem-height           float64\n",
      " 11  stem-width            float64\n",
      " 12  stem-root             object \n",
      " 13  stem-surface          object \n",
      " 14  stem-color            object \n",
      " 15  veil-color            object \n",
      " 16  has-ring              object \n",
      " 17  ring-type             object \n",
      " 18  spore-print-color     object \n",
      " 19  habitat               object \n",
      " 20  season                object \n",
      "dtypes: float64(3), int64(1), object(17)\n",
      "memory usage: 499.4+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c8f11846",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:47:03.860182Z",
     "iopub.status.busy": "2024-08-18T08:47:03.859930Z",
     "iopub.status.idle": "2024-08-18T08:47:04.334103Z",
     "shell.execute_reply": "2024-08-18T08:47:04.333113Z"
    },
    "papermill": {
     "duration": 0.488426,
     "end_time": "2024-08-18T08:47:04.336608",
     "exception": false,
     "start_time": "2024-08-18T08:47:03.848182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Imputing median values to the misisng values of float64\n",
    "num_cols = data.select_dtypes(include=['float64']).columns\n",
    "\n",
    "# Take median values and imputng them, same would be for test set\n",
    "data[num_cols] = data[num_cols].fillna(data[num_cols].median())\n",
    "\n",
    "# For test set\n",
    "test_data[num_cols] = test_data[num_cols].fillna(test_data[num_cols].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d5e3124d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:47:04.360370Z",
     "iopub.status.busy": "2024-08-18T08:47:04.360028Z",
     "iopub.status.idle": "2024-08-18T08:48:29.747989Z",
     "shell.execute_reply": "2024-08-18T08:48:29.746921Z"
    },
    "papermill": {
     "duration": 85.402757,
     "end_time": "2024-08-18T08:48:29.750699",
     "exception": false,
     "start_time": "2024-08-18T08:47:04.347942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id is NOT important. (p = 0.4997336950403224)\n",
      "cap-diameter is important. (p = 0.0)\n",
      "cap-shape is important. (p = 0.0)\n",
      "cap-surface is important. (p = 0.0)\n",
      "cap-color is important. (p = 0.0)\n",
      "does-bruise-or-bleed is important. (p = 0.0)\n",
      "gill-attachment is important. (p = 0.0)\n",
      "gill-spacing is important. (p = 0.0)\n",
      "gill-color is important. (p = 0.0)\n",
      "stem-height is important. (p = 0.0)\n",
      "stem-width is important. (p = 0.0)\n",
      "stem-root is important. (p = 0.0)\n",
      "stem-surface is important. (p = 0.0)\n",
      "stem-color is important. (p = 0.0)\n",
      "veil-color is important. (p = 0.0)\n",
      "has-ring is important. (p = 0.0)\n",
      "ring-type is important. (p = 0.0)\n",
      "spore-print-color is important. (p = 0.0)\n",
      "habitat is important. (p = 0.0)\n",
      "season is important. (p = 0.0)\n",
      "class\n",
      "p    1705396\n",
      "e    1411549\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "values = {}\n",
    "\n",
    "for col in data.columns:\n",
    "    if col == \"class\":\n",
    "        continue\n",
    "    \n",
    "    A, B = data[col], data['class']\n",
    "    \n",
    "    dfObserved = pd.crosstab(A, B)\n",
    "    chi2, p, dof, expected = stats.chi2_contingency(dfObserved.values)\n",
    "    values[col] = p\n",
    "    if p < alpha:\n",
    "        # Reject null hypothesis\n",
    "        print(\"{} is important. (p = {})\".format(col, p))\n",
    "    else:\n",
    "        print(\"{} is NOT important. (p = {})\".format(col, p))\n",
    "        \n",
    "print(data['class'].value_counts())\n",
    "sns.countplot(x='class', data = data)\n",
    "plt.xticks(rotation = 60)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7fdf1b1",
   "metadata": {
    "papermill": {
     "duration": 0.01293,
     "end_time": "2024-08-18T08:48:29.776541",
     "exception": false,
     "start_time": "2024-08-18T08:48:29.763611",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# New way"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22e88dfd",
   "metadata": {
    "papermill": {
     "duration": 0.012505,
     "end_time": "2024-08-18T08:48:29.801574",
     "exception": false,
     "start_time": "2024-08-18T08:48:29.789069",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Filling NaN values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37d409f4",
   "metadata": {
    "papermill": {
     "duration": 0.012346,
     "end_time": "2024-08-18T08:48:29.826464",
     "exception": false,
     "start_time": "2024-08-18T08:48:29.814118",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "As were discussed in the group our data was syntethic, however it stores a lot of data inside even for the NaN values. The first approach was just to use mode and fill those values. However, then community understand that it was made specifically and rather than using mode value we need to specifically point this as missing. Our algorithm would train and get information from this data. This is because they used syntethic data + GAN which made noise to our data.\n",
    "\n",
    "**Noise values** - our dataset contains also noise values, these values which rarely occuring. That's why we putted threshold of 100, if they are occuring less than this values than they are rarerly occuring otherwise less. By doing this our AI algorithm could better distinguish correct values and to which of the categories it should pay attention and which skips. This also reduces overfitting because model generalizes much better"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "45825abc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:29.852809Z",
     "iopub.status.busy": "2024-08-18T08:48:29.852522Z",
     "iopub.status.idle": "2024-08-18T08:48:43.026562Z",
     "shell.execute_reply": "2024-08-18T08:48:43.025768Z"
    },
    "papermill": {
     "duration": 13.189918,
     "end_time": "2024-08-18T08:48:43.028962",
     "exception": false,
     "start_time": "2024-08-18T08:48:29.839044",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def cleaning(df):\n",
    "    threshold = 100\n",
    "    \n",
    "    # all our categorical columns\n",
    "    cat_feats = [\"cap-shape\", \"cap-surface\", \"cap-color\", \"does-bruise-or-bleed\", \"gill-attachment\",\n",
    "                \"gill-spacing\", \"gill-color\", \"stem-root\", \"stem-surface\", \"stem-color\",\n",
    "                \"veil-color\", \"has-ring\", \"ring-type\", \"spore-print-color\", \"habitat\", \"season\"]\n",
    "    \n",
    "    \n",
    "    for feat in cat_feats:\n",
    "        if df[feat].dtype.name == \"category\":\n",
    "            # Add \"missing\" and \"noise\" to categories if not presented\n",
    "            if 'missing' not in df[feat].cat.categories:\n",
    "                df[feat] = df[feat].cat.add_categories('missing')\n",
    "            if 'noise' not in df[feat].cat.categories:\n",
    "                df[feat] = df[feat].cat.add_categories('noise')\n",
    "                \n",
    "        else:\n",
    "            # convert type to \"category\"\n",
    "            df[feat] = df[feat].astype('category')\n",
    "            df[feat] = df[feat].cat.add_categories(['missing', 'noise'])\n",
    "        \n",
    "        # Fill missing values with 'missing'\n",
    "        df[feat] = df[feat].fillna('missing')\n",
    "        \n",
    "        # Replace infrequent categories with 'noise'\n",
    "        counts = df[feat].value_counts(dropna=False)\n",
    "        infrequent_categories = counts[counts < threshold].index\n",
    "        \n",
    "        df[feat] = df[feat].apply(lambda x: 'noise' if x in infrequent_categories else x)\n",
    "        \n",
    "    return df\n",
    "    \n",
    "data = cleaning(data)\n",
    "test_data = cleaning(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fb095e97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:43.055895Z",
     "iopub.status.busy": "2024-08-18T08:48:43.055584Z",
     "iopub.status.idle": "2024-08-18T08:48:43.082043Z",
     "shell.execute_reply": "2024-08-18T08:48:43.081099Z"
    },
    "papermill": {
     "duration": 0.04212,
     "end_time": "2024-08-18T08:48:43.084083",
     "exception": false,
     "start_time": "2024-08-18T08:48:43.041963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>class</th>\n",
       "      <th>cap-diameter</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>does-bruise-or-bleed</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>...</th>\n",
       "      <th>stem-width</th>\n",
       "      <th>stem-root</th>\n",
       "      <th>stem-surface</th>\n",
       "      <th>stem-color</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>has-ring</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>habitat</th>\n",
       "      <th>season</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>e</td>\n",
       "      <td>8.80</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "      <td>f</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>w</td>\n",
       "      <td>...</td>\n",
       "      <td>15.39</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "      <td>w</td>\n",
       "      <td>missing</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>missing</td>\n",
       "      <td>d</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>p</td>\n",
       "      <td>4.51</td>\n",
       "      <td>x</td>\n",
       "      <td>h</td>\n",
       "      <td>o</td>\n",
       "      <td>f</td>\n",
       "      <td>a</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>6.48</td>\n",
       "      <td>missing</td>\n",
       "      <td>y</td>\n",
       "      <td>o</td>\n",
       "      <td>missing</td>\n",
       "      <td>t</td>\n",
       "      <td>z</td>\n",
       "      <td>missing</td>\n",
       "      <td>d</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>e</td>\n",
       "      <td>6.94</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>b</td>\n",
       "      <td>f</td>\n",
       "      <td>x</td>\n",
       "      <td>c</td>\n",
       "      <td>w</td>\n",
       "      <td>...</td>\n",
       "      <td>9.93</td>\n",
       "      <td>missing</td>\n",
       "      <td>s</td>\n",
       "      <td>n</td>\n",
       "      <td>missing</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>missing</td>\n",
       "      <td>l</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>e</td>\n",
       "      <td>3.88</td>\n",
       "      <td>f</td>\n",
       "      <td>y</td>\n",
       "      <td>g</td>\n",
       "      <td>f</td>\n",
       "      <td>s</td>\n",
       "      <td>missing</td>\n",
       "      <td>g</td>\n",
       "      <td>...</td>\n",
       "      <td>6.53</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "      <td>w</td>\n",
       "      <td>missing</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>missing</td>\n",
       "      <td>d</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>e</td>\n",
       "      <td>5.85</td>\n",
       "      <td>x</td>\n",
       "      <td>l</td>\n",
       "      <td>w</td>\n",
       "      <td>f</td>\n",
       "      <td>d</td>\n",
       "      <td>missing</td>\n",
       "      <td>w</td>\n",
       "      <td>...</td>\n",
       "      <td>8.36</td>\n",
       "      <td>missing</td>\n",
       "      <td>missing</td>\n",
       "      <td>w</td>\n",
       "      <td>missing</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "      <td>missing</td>\n",
       "      <td>g</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id class  cap-diameter cap-shape cap-surface cap-color  \\\n",
       "0   0     e          8.80         f           s         u   \n",
       "1   1     p          4.51         x           h         o   \n",
       "2   2     e          6.94         f           s         b   \n",
       "3   3     e          3.88         f           y         g   \n",
       "4   4     e          5.85         x           l         w   \n",
       "\n",
       "  does-bruise-or-bleed gill-attachment gill-spacing gill-color  ...  \\\n",
       "0                    f               a            c          w  ...   \n",
       "1                    f               a            c          n  ...   \n",
       "2                    f               x            c          w  ...   \n",
       "3                    f               s      missing          g  ...   \n",
       "4                    f               d      missing          w  ...   \n",
       "\n",
       "   stem-width  stem-root stem-surface stem-color veil-color has-ring  \\\n",
       "0       15.39    missing      missing          w    missing        f   \n",
       "1        6.48    missing            y          o    missing        t   \n",
       "2        9.93    missing            s          n    missing        f   \n",
       "3        6.53    missing      missing          w    missing        f   \n",
       "4        8.36    missing      missing          w    missing        f   \n",
       "\n",
       "  ring-type spore-print-color habitat season  \n",
       "0         f           missing       d      a  \n",
       "1         z           missing       d      w  \n",
       "2         f           missing       l      w  \n",
       "3         f           missing       d      u  \n",
       "4         f           missing       g      a  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cdfdc4b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:43.111649Z",
     "iopub.status.busy": "2024-08-18T08:48:43.111359Z",
     "iopub.status.idle": "2024-08-18T08:48:50.097700Z",
     "shell.execute_reply": "2024-08-18T08:48:50.096891Z"
    },
    "papermill": {
     "duration": 7.002713,
     "end_time": "2024-08-18T08:48:50.099925",
     "exception": false,
     "start_time": "2024-08-18T08:48:43.097212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cat_feats = [\"cap-shape\", \"cap-surface\", \"cap-color\", \"does-bruise-or-bleed\", \"gill-attachment\",\n",
    "                \"gill-spacing\", \"gill-color\", \"stem-root\", \"stem-surface\", \"stem-color\",\n",
    "                \"veil-color\", \"has-ring\", \"ring-type\", \"spore-print-color\", \"habitat\", \"season\"]\n",
    "    \n",
    "for feat in cat_feats:\n",
    "    data[feat] = data[feat].astype('category')\n",
    "for feat in cat_feats:\n",
    "    test_data[feat] = test_data[feat].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8a8ccc81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:50.127800Z",
     "iopub.status.busy": "2024-08-18T08:48:50.127498Z",
     "iopub.status.idle": "2024-08-18T08:48:50.146303Z",
     "shell.execute_reply": "2024-08-18T08:48:50.145459Z"
    },
    "papermill": {
     "duration": 0.035171,
     "end_time": "2024-08-18T08:48:50.148553",
     "exception": false,
     "start_time": "2024-08-18T08:48:50.113382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3116945 entries, 0 to 3116944\n",
      "Data columns (total 21 columns):\n",
      " #   Column                Dtype   \n",
      "---  ------                -----   \n",
      " 0   id                    int64   \n",
      " 1   class                 object  \n",
      " 2   cap-diameter          float64 \n",
      " 3   cap-shape             category\n",
      " 4   cap-surface           category\n",
      " 5   cap-color             category\n",
      " 6   does-bruise-or-bleed  category\n",
      " 7   gill-attachment       category\n",
      " 8   gill-spacing          category\n",
      " 9   gill-color            category\n",
      " 10  stem-height           float64 \n",
      " 11  stem-width            float64 \n",
      " 12  stem-root             category\n",
      " 13  stem-surface          category\n",
      " 14  stem-color            category\n",
      " 15  veil-color            category\n",
      " 16  has-ring              category\n",
      " 17  ring-type             category\n",
      " 18  spore-print-color     category\n",
      " 19  habitat               category\n",
      " 20  season                category\n",
      "dtypes: category(16), float64(3), int64(1), object(1)\n",
      "memory usage: 166.5+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c911d81d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:50.177020Z",
     "iopub.status.busy": "2024-08-18T08:48:50.176756Z",
     "iopub.status.idle": "2024-08-18T08:48:50.240121Z",
     "shell.execute_reply": "2024-08-18T08:48:50.239260Z"
    },
    "papermill": {
     "duration": 0.079652,
     "end_time": "2024-08-18T08:48:50.242265",
     "exception": false,
     "start_time": "2024-08-18T08:48:50.162613",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((3116945, 19), (3116945,))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data.drop(['id', 'class'], axis = 1)\n",
    "y = data['class']\n",
    "\n",
    "test_data = test_data.drop(['id'], axis = 1)\n",
    "X.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "86649258",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:50.270214Z",
     "iopub.status.busy": "2024-08-18T08:48:50.269949Z",
     "iopub.status.idle": "2024-08-18T08:48:50.948225Z",
     "shell.execute_reply": "2024-08-18T08:48:50.947451Z"
    },
    "papermill": {
     "duration": 0.694676,
     "end_time": "2024-08-18T08:48:50.950498",
     "exception": false,
     "start_time": "2024-08-18T08:48:50.255822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Encode class variables to 0 and 1\n",
    "label_encoder = LabelEncoder()\n",
    "y_encoded = label_encoder.fit_transform(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4dcc898",
   "metadata": {
    "papermill": {
     "duration": 0.013695,
     "end_time": "2024-08-18T08:48:50.978361",
     "exception": false,
     "start_time": "2024-08-18T08:48:50.964666",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6d0ec087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:51.006093Z",
     "iopub.status.busy": "2024-08-18T08:48:51.005577Z",
     "iopub.status.idle": "2024-08-18T08:48:52.470541Z",
     "shell.execute_reply": "2024-08-18T08:48:52.469755Z"
    },
    "papermill": {
     "duration": 1.481434,
     "end_time": "2024-08-18T08:48:52.472949",
     "exception": false,
     "start_time": "2024-08-18T08:48:50.991515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, random_state = 42, stratify = y_encoded)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e69eecc5",
   "metadata": {
    "papermill": {
     "duration": 0.01314,
     "end_time": "2024-08-18T08:48:52.499842",
     "exception": false,
     "start_time": "2024-08-18T08:48:52.486702",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We are analyzing whether both of the traina and test has the same number of samples or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a5c5d27c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:52.528188Z",
     "iopub.status.busy": "2024-08-18T08:48:52.527442Z",
     "iopub.status.idle": "2024-08-18T08:48:52.908885Z",
     "shell.execute_reply": "2024-08-18T08:48:52.907987Z"
    },
    "papermill": {
     "duration": 0.397986,
     "end_time": "2024-08-18T08:48:52.910934",
     "exception": false,
     "start_time": "2024-08-18T08:48:52.512948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5471371959201063"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(y_train)/len(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "51fdfb24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:52.982719Z",
     "iopub.status.busy": "2024-08-18T08:48:52.982262Z",
     "iopub.status.idle": "2024-08-18T08:48:53.114397Z",
     "shell.execute_reply": "2024-08-18T08:48:53.113563Z"
    },
    "papermill": {
     "duration": 0.149667,
     "end_time": "2024-08-18T08:48:53.116357",
     "exception": false,
     "start_time": "2024-08-18T08:48:52.966690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5471364937753213"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(y_test)/len(y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "189a94b9",
   "metadata": {
    "papermill": {
     "duration": 0.013431,
     "end_time": "2024-08-18T08:48:53.143596",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.130165",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Baseline XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f2f219d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:53.172337Z",
     "iopub.status.busy": "2024-08-18T08:48:53.171798Z",
     "iopub.status.idle": "2024-08-18T08:48:53.177917Z",
     "shell.execute_reply": "2024-08-18T08:48:53.177128Z"
    },
    "papermill": {
     "duration": 0.022455,
     "end_time": "2024-08-18T08:48:53.179770",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.157315",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nclf_xgb_v1 = xgb.XGBClassifier(objective='binary:logistic',\\n                            seed=42,\\n                            enable_categorical = True, # when we have categroical data only\\n                            early_stopping_rounds=5,\\n                            eval_metric='auc',\\n                            )\\n\\nclf_xgb_v1.fit(X_train,\\n            y_train,\\n            verbose=True,\\n            eval_set=[(X_test, y_test)])\\n\""
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "clf_xgb_v1 = xgb.XGBClassifier(objective='binary:logistic',\n",
    "                            seed=42,\n",
    "                            enable_categorical = True, # when we have categroical data only\n",
    "                            early_stopping_rounds=5,\n",
    "                            eval_metric='auc',\n",
    "                            )\n",
    "\n",
    "clf_xgb_v1.fit(X_train,\n",
    "            y_train,\n",
    "            verbose=True,\n",
    "            eval_set=[(X_test, y_test)])\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe83bda7",
   "metadata": {
    "papermill": {
     "duration": 0.013889,
     "end_time": "2024-08-18T08:48:53.207340",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.193451",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Created correlation matrix to see how the model performing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c65fdc65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:53.235447Z",
     "iopub.status.busy": "2024-08-18T08:48:53.235168Z",
     "iopub.status.idle": "2024-08-18T08:48:53.240436Z",
     "shell.execute_reply": "2024-08-18T08:48:53.239640Z"
    },
    "papermill": {
     "duration": 0.021328,
     "end_time": "2024-08-18T08:48:53.242321",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.220993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\npredictions_1 = clf_xgb_v1.predict(X_test)\\n\\n# sns.set(font_scale=1)\\ncm = confusion_matrix(y_test, predictions_1)\\n\\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not Left', 'Left'])\\ndisp.plot()\\nplt.show()\\n\""
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "predictions_1 = clf_xgb_v1.predict(X_test)\n",
    "\n",
    "# sns.set(font_scale=1)\n",
    "cm = confusion_matrix(y_test, predictions_1)\n",
    "\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not Left', 'Left'])\n",
    "disp.plot()\n",
    "plt.show()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8793dd92",
   "metadata": {
    "papermill": {
     "duration": 0.013581,
     "end_time": "2024-08-18T08:48:53.269635",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.256054",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## GridSearchCV\n",
    "Note: Better to use Optum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e393d79c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:53.297846Z",
     "iopub.status.busy": "2024-08-18T08:48:53.297606Z",
     "iopub.status.idle": "2024-08-18T08:48:53.303660Z",
     "shell.execute_reply": "2024-08-18T08:48:53.302851Z"
    },
    "papermill": {
     "duration": 0.022286,
     "end_time": "2024-08-18T08:48:53.305464",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.283178",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nparam_grid = {\\n    'max_depth': [3, 4, 5],\\n    'learning_rate': [0.05, 0.01, 0.1],\\n    'gamma': [0, 0.25, 1.0],\\n    'reg_lambda': [0, 1.0, 10.0],\\n    'scale_pos_weight': [1, 3, 5]\\n}\\n\\n\\noptimal_parameters = GridSearchCV(\\n    estimator=xgb.XGBClassifier(objective='binary:logistic',\\n                                seed=42,\\n                                subsample=0.9,\\n                                colsample_bytree=0.5,\\n                                enable_categorical = True, # when we have categroical data only\\n                                eval_metric='auc',\\n                                early_stopping_rounds=10,\\n                               ),\\n    param_grid=param_grid,\\n    scoring='roc_auc',\\n    verbose=1,\\n    n_jobs=7,\\n    cv=3\\n)\\n\\noptimal_parameters.fit(X_train,\\n                       y_train,\\n                       eval_set=[(X_test, y_test)],\\n                       verbose=True)\\n\\n# printing best hyperparameters from GradientSearchCV\\nprint(optimal_parameters.best_params_)\\n\""
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Round 1\n",
    "\"\"\"\n",
    "param_grid = {\n",
    "    'max_depth': [3, 4, 5],\n",
    "    'learning_rate': [0.05, 0.01, 0.1],\n",
    "    'gamma': [0, 0.25, 1.0],\n",
    "    'reg_lambda': [0, 1.0, 10.0],\n",
    "    'scale_pos_weight': [1, 3, 5]\n",
    "}\n",
    "\n",
    "\n",
    "optimal_parameters = GridSearchCV(\n",
    "    estimator=xgb.XGBClassifier(objective='binary:logistic',\n",
    "                                seed=42,\n",
    "                                subsample=0.9,\n",
    "                                colsample_bytree=0.5,\n",
    "                                enable_categorical = True, # when we have categroical data only\n",
    "                                eval_metric='auc',\n",
    "                                early_stopping_rounds=10,\n",
    "                               ),\n",
    "    param_grid=param_grid,\n",
    "    scoring='roc_auc',\n",
    "    verbose=1,\n",
    "    n_jobs=7,\n",
    "    cv=3\n",
    ")\n",
    "\n",
    "optimal_parameters.fit(X_train,\n",
    "                       y_train,\n",
    "                       eval_set=[(X_test, y_test)],\n",
    "                       verbose=True)\n",
    "\n",
    "# printing best hyperparameters from GradientSearchCV\n",
    "print(optimal_parameters.best_params_)\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cac6633",
   "metadata": {
    "papermill": {
     "duration": 0.01373,
     "end_time": "2024-08-18T08:48:53.333051",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.319321",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Hyperparameters XGBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e6d3ff8",
   "metadata": {
    "papermill": {
     "duration": 0.013656,
     "end_time": "2024-08-18T08:48:53.360869",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.347213",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### OLD Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a353524c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:53.389699Z",
     "iopub.status.busy": "2024-08-18T08:48:53.389455Z",
     "iopub.status.idle": "2024-08-18T08:48:53.393068Z",
     "shell.execute_reply": "2024-08-18T08:48:53.392276Z"
    },
    "papermill": {
     "duration": 0.020298,
     "end_time": "2024-08-18T08:48:53.395019",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.374721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#parameters ={'n_estimators': 432, 'max_depth': 18, 'learning_rate': 0.019177494166556952, 'subsample': 0.6944494028059239, 'colsample_bytree': 0.5177980824894136, 'gamma': 0.0004342336537981622, 'lambda': 1.3527652792856453e-06, 'alpha': 4.10797226500692e-08, 'scale_pos_weight': 1.0121323580230017,'enable_categorical': True }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e5fcbef3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:53.424290Z",
     "iopub.status.busy": "2024-08-18T08:48:53.423658Z",
     "iopub.status.idle": "2024-08-18T08:48:53.428356Z",
     "shell.execute_reply": "2024-08-18T08:48:53.427574Z"
    },
    "papermill": {
     "duration": 0.021139,
     "end_time": "2024-08-18T08:48:53.430145",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.409006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "parameters={'n_estimators': 297, 'max_depth': 16, 'learning_rate': 0.03906159386409017, 'subsample': 0.6935900010487451, 'colsample_bytree': 0.5171160704967471, 'gamma': 0.00013710778966124443, 'lambda': 0.0017203271581656767, 'alpha': 8.501510750413265e-06, 'scale_pos_weight': 1.0017942891559255,'enable_categorical': True,'tree_method': 'hist', 'device': 'cuda'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fdb9738f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:48:53.458799Z",
     "iopub.status.busy": "2024-08-18T08:48:53.458558Z",
     "iopub.status.idle": "2024-08-18T08:49:43.099772Z",
     "shell.execute_reply": "2024-08-18T08:49:43.098727Z"
    },
    "papermill": {
     "duration": 49.658386,
     "end_time": "2024-08-18T08:49:43.102258",
     "exception": false,
     "start_time": "2024-08-18T08:48:53.443872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = xgb.XGBClassifier(**parameters)\n",
    "model = model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f664525f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:49:43.132306Z",
     "iopub.status.busy": "2024-08-18T08:49:43.131577Z",
     "iopub.status.idle": "2024-08-18T08:49:44.155480Z",
     "shell.execute_reply": "2024-08-18T08:49:44.154469Z"
    },
    "papermill": {
     "duration": 1.041624,
     "end_time": "2024-08-18T08:49:44.158319",
     "exception": false,
     "start_time": "2024-08-18T08:49:43.116695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[08:49:43] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\n",
      "Potential solutions:\n",
      "- Use a data structure that matches the device ordinal in the booster.\n",
      "- Set the device for booster before call to inplace_predict.\n",
      "\n",
      "This warning will only be shown once.\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "predictions_2 = model.predict(X_test)\n",
    "\n",
    "cm = confusion_matrix(y_test, predictions_2, labels=model.classes_)\n",
    "\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Not Left', 'Left'])\n",
    "disp.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01137f9c",
   "metadata": {
    "papermill": {
     "duration": 0.015058,
     "end_time": "2024-08-18T08:49:44.192801",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.177743",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40746e62",
   "metadata": {
    "papermill": {
     "duration": 0.014476,
     "end_time": "2024-08-18T08:49:44.221779",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.207303",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature importnace indicates how useful or valueable each feature was while constructiong boosted decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f63c6640",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:49:44.252950Z",
     "iopub.status.busy": "2024-08-18T08:49:44.252514Z",
     "iopub.status.idle": "2024-08-18T08:49:44.774567Z",
     "shell.execute_reply": "2024-08-18T08:49:44.773503Z"
    },
    "papermill": {
     "duration": 0.540236,
     "end_time": "2024-08-18T08:49:44.776924",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.236688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importance = model.feature_importances_\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "fig = plt.figure(figsize = (18, 6))\n",
    "plt.barh(range(len(sorted_idx)), feature_importance[sorted_idx], align = 'center')\n",
    "plt.yticks(range(len(sorted_idx)), np.array(X_test.columns)[sorted_idx])\n",
    "plt.title('Feature Importance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42111156",
   "metadata": {
    "papermill": {
     "duration": 0.01514,
     "end_time": "2024-08-18T08:49:44.807851",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.792711",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# SHAP Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dd426bb",
   "metadata": {
    "papermill": {
     "duration": 0.014685,
     "end_time": "2024-08-18T08:49:44.837717",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.823032",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### this method helpful to distinguish features that are important to making the prediction. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ab79539e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:49:44.868960Z",
     "iopub.status.busy": "2024-08-18T08:49:44.868667Z",
     "iopub.status.idle": "2024-08-18T08:49:44.874276Z",
     "shell.execute_reply": "2024-08-18T08:49:44.873436Z"
    },
    "papermill": {
     "duration": 0.023553,
     "end_time": "2024-08-18T08:49:44.876270",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.852717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nexplainer = shap.Explainer(model)\\nshap_values = explainer(np.ascontiguousarray(X_test))\\nshap_importance = shap_values.abs.mean(0).values\\nsorted_idx = shap_importance.argsort()\\nfig = plt.figure(figsize = (18, 6))\\nplt.barh(range(len(sorted_idx)), shap_importance[sorted_idx], align=\"center\")\\nplt.yticks(range(len(sorted_idx)), np.array(X_test.columns)[sorted_idx])\\nplt.title(\"SHAP Importance\")\\nplt.show()\\n'"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "explainer = shap.Explainer(model)\n",
    "shap_values = explainer(np.ascontiguousarray(X_test))\n",
    "shap_importance = shap_values.abs.mean(0).values\n",
    "sorted_idx = shap_importance.argsort()\n",
    "fig = plt.figure(figsize = (18, 6))\n",
    "plt.barh(range(len(sorted_idx)), shap_importance[sorted_idx], align=\"center\")\n",
    "plt.yticks(range(len(sorted_idx)), np.array(X_test.columns)[sorted_idx])\n",
    "plt.title(\"SHAP Importance\")\n",
    "plt.show()\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a16f031c",
   "metadata": {
    "papermill": {
     "duration": 0.014952,
     "end_time": "2024-08-18T08:49:44.906473",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.891521",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8da25600",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-18T08:49:44.937873Z",
     "iopub.status.busy": "2024-08-18T08:49:44.937617Z",
     "iopub.status.idle": "2024-08-18T08:49:49.155702Z",
     "shell.execute_reply": "2024-08-18T08:49:49.154504Z"
    },
    "papermill": {
     "duration": 4.236133,
     "end_time": "2024-08-18T08:49:49.157753",
     "exception": false,
     "start_time": "2024-08-18T08:49:44.921620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Submission file created\n"
     ]
    }
   ],
   "source": [
    "id_column = submission_data.pop(\"id\")\n",
    "\n",
    "y_test_predict = model.predict(test_data)\n",
    "y_test_binary = (y_test_predict > 0.5).astype(int)\n",
    "\n",
    "submission_df = pd.DataFrame({\n",
    "    'id': id_column,\n",
    "    'class': y_test_binary\n",
    "})\n",
    "\n",
    "submission_df['class'] = np.where(submission_df['class'] == 1, 'p', 'e')\n",
    "\n",
    "submission_df.to_csv('submission.csv', index=False)\n",
    "print(\"Submission file created\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 9045607,
     "sourceId": 76727,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 212.716971,
   "end_time": "2024-08-18T08:49:50.997102",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-18T08:46:18.280131",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
